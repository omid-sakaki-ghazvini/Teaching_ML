####### first part ######

####### import iris csv dataset from sklearn.datasets Library #######
from sklearn.datasets import load_iris

####### Check the information in the iris database ########
iris= load_iris()

print(iris.data.shape)

print(iris.feature_names)

X= iris.data

print(iris.target.shape)

print(iris.target_names)

y= iris.target

####### End of the first part ######


####### second part ######

###### split the data in the dataset using the sklearn.model_selection library ######

from sklearn.model_selection import train_test_split

train, test, train_labels, test_labels = train_test_split (X, y, test_size = 0.2)

print(train.shape)

print(test.shape)

print(train_labels.shape)

print(test_labels.shape)

####### End of the second part ######


####### third part ######

####### Examining some machine learning models (Classifier) #######

####### KNN model #######

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors = 15)

model = knn.fit(train, train_labels)

pred = model.predict(test)

####### SVM model #######

from sklearn.svm import SVC

svm = SVC(kernel='rbf')

svm_model = svm.fit(train, train_labels)

pred_svm = svm_model.predict(test)

####### Decision Tree model #######

from sklearn.tree import DecisionTreeClassifier

tree = DecisionTreeClassifier()

tree_model = tree.fit(train, train_labels)

pred_tree = tree_model.predict(test)

####### End of the third part ######

####### fourth part ######

####### plt #######

import matplotlib.pyplot as plt

from sklearn.inspection import DecisionBoundaryDisplay

titles = (
    "KNeighborsClassifier",
    "SVC with RBF kernel",
    "DecisionTreeClassifier",
)

models = (
    knn_model,
    svm_model,
    tree_model,
)

fig, sub = plt.subplots(3, 1)
plt.subplots_adjust(wspace=0.4, hspace=0.4)

X0, X1 = X[:, 0], X[:, 1]

for model, title, ax in zip(models, titles, sub.flatten()):
    disp = DecisionBoundaryDisplay.from_estimator(
        model,
        X,
        response_method="predict",
        cmap=plt.cm.coolwarm,
        alpha=0.8,
        ax=ax,
        train_labels=iris.feature_names[0],
        test_labels=iris.feature_names[1],
    )
    ax.scatter(X0, X1, c=y, cmap=plt.cm.coolwarm, s=20, edgecolors="k")
    ax.set_xticks(())
    ax.set_yticks(())
    ax.set_title(title)

plt.show()

####### End of the fourth part ######

####### last part ######

from sklearn.metrics import accuracy_score

print("knn model accuracy : " , accuracy_score ( test_labels, pred_knn ) )
print("svm model accuracy : " , accuracy_score ( test_labels, pred_svm ) )
print("decision tree model accuracy : " , accuracy_score ( test_labels, pred_tree ) )

####### End of the last part ######
